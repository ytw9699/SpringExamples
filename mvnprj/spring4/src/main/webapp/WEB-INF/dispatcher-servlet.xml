<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/websocket
       http://www.springframework.org/schema/websocket/spring-websocket.xsd">
       
     <websocket:handlers>
		<websocket:mapping handler="echoHandler" path="/echo-ws" />
		<websocket:mapping handler="chatHandler" path="/chat-ws" />
	</websocket:handlers>
	
	<bean id="echoHandler" class="net.example16.EchoHandler" />
	<bean id="chatHandler" class="net.example16.ChatWebSocketHandler" />
	
<mvc:default-servlet-handler/>
   
  <mvc:annotation-driven />
   
<!--mvc:annotation-driven의 역할은 핸들러맵핑이라는 기본객체만 구현을 해줌 그러니까 기본적으로 컨트롤러를 찾아서 맵핑을 시켜주는거임
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping
이 2가지를 빈으로 등록시켜주니까 맵핑을 시켜주는거, 그리고 아래처럼 풀패스설정도 해주기때문에 /경로를 이용가능
-->
   
<!--아래는 수동설정으로 풀패스를 잡아주는것이다
 <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
   <property name="alwaysUseFullPath" value="true" />
</bean>

<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
</bean> -->

<mvc:view-controller path="/index2" view-name="index" />
                  <!-- 인덱스 설정 index2요청이오면 /WEB-INF/view/index.jsp -->
<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"  p:order="1">
   <property name="prefix" value="/WEB-INF/view/" />
   <property name="suffix" value=".jsp" />
</bean>

<!-- example0.do -->
<bean id="helloController" class="net.example0.HelloController" />
<!-- example0.do -->

<!-- example1.do -->
<!-- 이렇게 빈을 생성한다는건 객체를 생성해서 스프링 컨테이너에 담는다는뜻 -->
<bean id="newArticleController" class="net.example1.NewArticleController"
		p:articleService-ref="articleService" />
<!-- p:는 property 속성이고  articleService는 setArticleService메소드이고 그게 참조하는게 id="articleService 이객체다 셋메소드에다가 이객체를 넣어라! -->
<!--이한줄을 통해 객체간의 관계설정 articleService객체를 컨트롤러에 주입하는거 -->
<!-- dependency injection은 di: articleService객체를 newArticleController에 주입하는거
따로따로 만들어놓고 가져다쓰게끔  -->
<bean id="articleService" class="net.example1.ArticleService" />
<!-- example1.do -->

<!-- example2.do -->
<bean class="net.example2.OrderController" />
<!-- example2.do -->

<!-- example3.do -->
<bean class="net.example3.SearchController" />
<!-- example3.do -->

<!-- example4.do -->
<bean id="cookieController" class="net.example4.CookieController" />
<bean id="cookieController2" class="net.example4.CookieController2" />
<!-- example4.do -->

<!-- example5.do -->
<bean class="net.example5.PathVariableController" />
<!-- example5.do -->

<!-- example6.do -->
<bean class="net.example6.GameSearchController"
	p:searchService-ref="searchService" />
<bean id="searchService" class="net.example6.SearchService" />
<!-- example6.do -->

<!-- example7.do -->
<bean class="net.example7.SessionController" />
<bean class="net.example7.SessionController2" />
<bean class="net.example7.SessionController3" />
<bean class="net.example7.SessionController4" />
<!-- example7.do -->

<!-- example8.do -->
<bean class="net.example8.CreateAccountController" />

<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
	<property name="basenames">
	<!--p= property 이얘기는 setBasenames라는 메소드가있다는거
	p:articleService- -->
		<list>
			<value>messages.validation</value>
			<!--ref="articleService"이거와 같음 이렇게 넣어주면 사용하는 스프링컨테이너안에서 프로퍼티스 메시지 파일을 사용할수있다 -->
		</list>
	</property>
</bean>
<!-- example8.do -->

<!-- example9.do -->
<bean class="net.example9.FullpathController" />
<!-- org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping
여기서는 아래와 같은 방법으로 풀패스 설정하면 안됨 위 두가지를 투르로 설정해줘야함 -->
<!-- <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="alwaysUseFullPath" value="true" />
		프로퍼티라는 이름은 alwaysUseFullPath이게 셋메소드라는것
	</bean>
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="alwaysUseFullPath" value="true" />		
	</bean> -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" p:alwaysUseFullPath="true"/>
<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" p:alwaysUseFullPath="true"/> -->
<!-- <url-pattern>/game/*</url-pattern> 이렇게 경로설정하고싶으면 위 2가지 를 설정해줘야함-->
<!-- 하지만 경로를 <url-pattern>/</url-pattern> 요렇게 해주면 usefullfath true안줘도 풀패스설정됨! -->
<!-- example9.do -->

<!-- example10.do -->
<bean id="authenticator" class="net.example10.MockAuthenticator"
		p:commonLogger-ref="commonLogger" />

<bean class="net.example10.LoginController">
	<property name="authenticator" ref="authenticator" />
</bean>

<bean id="commonLogger" class="net.example10.CommonLoggerImpl" />
<!-- example10.do -->

<!-- example11.do -->
<!-- 디스패처 서블릿이 multipartResolver의 이름인 빈을 사용하기때문에 빈 id는 반드시 multipartResolver의 이름이어야함 -->  
<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
<bean class="net.example11.UploadController1" />
<bean class="net.example11.UploadController2" />
<bean class="net.example11.UploadController3" />
<!-- example11.do -->

<!-- example12.do -->
<bean class="net.example12.QueryLogController" />
<!-- example12.do -->

<!-- example13.do -->
<bean class="net.example13.HttpServletRequestController" />
<!-- example13.do -->

<!-- example14.do -->
<bean class="net.example14.SameValueController" />
<!-- example14.do -->

<!-- example15.do -->
<bean class="net.example15.DownloadController" />
 		<!-- 다운로드 -->
  <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="0" />
   <bean id="download" class="net.example15.DownloadView"/>
<!-- <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"  p:order="1"> -->
<!-- example15.do -->

<!-- example16.do -->
<!-- 16은 여기서 설정안함! -->
<!-- example16.do -->

<!-- example17.do -->
<bean class="net.example17.interceptorController" />
	<mvc:interceptors>
		<!-- 몇개의 지정경로만도 설정가능-->
		<mvc:interceptor>
				<mvc:mapping path="/example17/**"/>
				<mvc:mapping path="/**.do"/>
			<bean id = "MeasuringInterceptor" class="net.example17.MeasuringInterceptor"/>
		</mvc:interceptor>
		<!-- 지정경로 설정 -->
	</mvc:interceptors>
<!-- 아래와 같은 설정보다는 위와같은 설정이 간단 -->
<!-- <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
	<property name="alwaysUseFullPath" value="true" />
	DefaultAnnotationHandlerMapping이 컨트롤러를 찾아주는데 그안에 인터셉터 등록  그러면 맵핑되는 컨트롤러 찾기전에 인터셉터가 동작
	<property name="interceptors">
		<list>	interceptor
		인터셉터 하나등록  login이 되어있는지 안되어있는지에 따라서 로긴창으로 갈지 게시판으로 갈지에 대한 자동 작업
			<ref bean="sessionInterceptor"/>
		</list>
	</property>
</bean>
<bean id="sessionInterceptor" class="net.nice19.smboard.interceptor.SessionInterceptor" /> -->
<!-- example17.do -->



<!-- <bean class="net.Controller.Controller1" />
<bean class="net.Controller.Controller2" /> -->
</beans>