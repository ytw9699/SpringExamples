<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"></bean>
				<!-- 접근 제한이 된 경우에 다양한 처리를 하고 싶다면 직접 AccessDeniedHandler 인터페이스를 구현하는 편 -->
	<bean id="customLoginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"></bean>
			<!-- 로긴 성공시 사용자 권한에 따라 이동할 페이지를 지정 -->
	<!-- <bean id="customPasswordEncoder" class="org.zerock.security.CustomNoOpPasswordEncoder"></bean> -->
												<!-- 암호화 처리하지 않는 패스워드 인코더를 직접만듬 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	
	<bean id="customUserDetailsService" class="org.zerock.security.CustomUserDetailsService"></bean>
		
 <security:http>
							<!-- 접근제한 설정 -->
		<security:intercept-url pattern="/sample/all" access="permitAll" />
<!-- 특정한 URI에 접근할 때 인터셉터를 이용해서 접근을 제한하는 설정은 <security:intercept-url> 을 이용 
<security:intercept-url>은 pattern이라는 속성과 access라는 속성을 지정해야만 합니다,access의 경우는 권한을 체크 -->
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />
						<!--/sample/member'라는 URI는 ,ROLE_MEMBER’라는 권한이 있는 사용자만이 접근 -->
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')" />
		
		<security:access-denied-handler ref="customAccessDenied" />
   <!-- <security:access-denied-handler error-page="/accessError"/> -->
							<!-- 접근제한이 된경우 error-page를 지정,common컨트롤러가보자 -->
<!-- 하지만 이방법과 달리 접근 제한이 된 경우에 다양한 처리를 하고 싶다면 직접 AccessDeniedHandler 인터페이스를 구현해야한다.
<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"></bean>
<security:access-denied-handler ref="customAccessDenied" />
 --> 
	
	<security:form-login login-page="/customLogin" authentication-success-handler-ref="customLoginSuccess" />
	<!-- URI를 이용해서 로그인 페이지를 다시 제작 , URI는 반드시 GET 방식으로 접근하는 URI를 지정, 로긴 성공시 사용자 권한에 따라 이동할 페이지 지정도 해줌-->
	
	<!-- <security:csrf disabled="true"/>
	 스프링 시큐리티에서는 CSRF 토큰 생성을 비활성화 하 거나 CSRF 토큰을 쿠키를 이용해서 처리하는 등의 설정을 지원
	 -->
	 <!-- <security:logout logout-url="/customLogout" invalidate-session="true"  /> -->
	 <!-- 로그아웃도 로긴과 동일 ,로그아웃 시 세션을 무효화 시키는 설정이나 특정한 쿠키를 지우는 작업을 지정할 수있고
	  로그아웃을 하게 되면  내부적으로는 자동으로 로그인 페이지를 호출함	 그래서 로그아웃 성공시 url도 지정가능
	  (logout-success-url="/")
	 <security:logout logout-url="/customLogout" invalidate-session="true"  logout-success-url="/" />
	 -->
	 <security:remember-me data-source-ref="dataSource" token-validity-seconds="604800" />
	 <!-- 자동 로그인에서 데이터베이스를 이용하는 설정은 별도의 설정 없이 data—source-ref만을 지정 -->
<!--  DataSource를 지정하고 테이블을 이용해서 기존 로그인 정보를 기록(옵션 -->  <!-- 쿠키의 유효시간을 지정합니다. -->
	<security:logout logout-url="/customLogout" invalidate-session="true" delete-cookies="remember-me,JSESSION_ID" />
	 																	<!-- 로그아웃을 하면  자동 로그인 에 사용하는 쿠키도 삭제 -->
 </security:http>
	
	<!-- <security:authentication-manager>
		<security:authentication-provider> 
			<security:user-service> 
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
						아이디:member,비번:member 라는 계정 정보를 가진 사용자가 로그인을 할 수 있도록 
						만일 패스워드의 인코딩 처리 없이 사용하고 싶다면 패스워드 앞에 'Inoop}' 문자열을 추가
				<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/>
						’ROLE_ADMIN’과 ’ROLE_MEMBER’라는 2개의 권한을 가지도록 지정
			</security:user-service> 
		</security:authentication-provider> 
	</security:authentication-manager> -->

	<security:authentication-manager>
	
		<!-- <security:authentication-provider>  -->
		<security:authentication-provider user-service-ref="customUserDetailsService">
<!-- 616p,authentication-provider는 인증제공자,실제 인증 작업 진행, customUserDetailsService는 권한에 대한 정보같이 전달,인증과 권한에 대한 실제처리도함 -->
			<!-- <security:jdbc-user-service data-source-ref="dataSource" />  -->
			
		<!-- <security:jdbc-user-service data-source-ref="dataSource" users-by-username-query="select userid , userpw 
		, enabled from tbl_member where userid = ? " authorities-by-username-query="select 
		userid, auth from tbl_member_auth where userid = ? " /> -->
		
			<!-- <security:password-encoder ref="customPasswordEncoder" /> -->
			<security:password-encoder ref="bcryptPasswordEncoder" />
			
		</security:authentication-provider> 

	</security:authentication-manager>

</beans>
