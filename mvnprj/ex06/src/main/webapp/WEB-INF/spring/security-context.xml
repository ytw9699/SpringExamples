<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"></bean>
<bean id="customLoginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"></bean>
											<!-- 로긴 성공시 사용자 권한에 따라 이동할 페이지 지정 -->
		
	<security:http>
		<security:intercept-url pattern="/sample/all" access="permitAll" />
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />
												<!--’ROLE_MEMBER’라는 권한이 있는 사용자만이 접근 -->
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')" />
		
		<security:access-denied-handler ref="customAccessDenied" />
		<!-- <security:access-denied-handler error-page="/accessError"/> -->
												<!-- 접근제한이 된경우 error-page를 지정 -->
<!-- 하지만 이방법과 달리 접근 제한이 된 경우에 다양한 처리를 하고 싶다면 직접 AccessDeniedHandler 인터페이스를 구현해야한다.
<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"></bean>
<security:access-denied-handlerref="customAccessDenied" />
 --> 
	
	<security:form-login login-page="/customLogin" authentication-success-handler-ref="customLoginSuccess" />
	<!-- URI를 이용해서 로그인 페이지를 다시 제작 , URI는 반드시 GET 방식으로 접근하는 URI를 지정, 로긴 성공시 사용자 권한에 따라 이동할 페이지 지정도 해줌-->
	
	<!-- <security:csrf disabled="true"/>
	 스프링 시큐리티에서는 CSRF 토큰 생성을 비활성화 하 거나 CSRF 토큰을 쿠키를 이용해서 처리하는 등의 설정을 지원
	 -->
	 <security:logout logout-url="/customLogout" invalidate-session="true"  />
	 <!-- 로그아웃도 로긴과 동일 ,로그아웃 시 세션을 무효화 시키는 설정이나 특정한 쿠키를 지우는 작업을 지정할 수 (logout-success-url="/")
	 <security:logout logout-url="/customLogout" invalidate-session="true"  logout-success-url="/" />
	 -->
	
	</security:http>
	
	<security:authentication-manager>
	
		<security:authentication-provider> 
		
			<security:user-service> 
			
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
						<!-- 아이디:member,비번:member 라는 계정 정보를 가진 사용자가 로그인을 할 수 있도록 --> 
						
				<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/>
						<!-- ’ROLE_ADMIN’과 ’ROLE_MEMBER’라는 2개의 권한을 가지도록 지정 -->
			
			</security:user-service> 
			
		</security:authentication-provider> 

	</security:authentication-manager>

	<!-- <security:authentication-manager>
	
		<security:authentication-provider> 
		
			<security:jdbc-user-service data-source-ref="dataSource" /> 
			
		</security:authentication-provider> 

	</security:authentication-manager> -->

</beans>
